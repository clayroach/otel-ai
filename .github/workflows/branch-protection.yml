name: Branch Protection & PR Requirements

on:
  schedule:
    # Check branch protection daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'check'
        type: choice
        options:
          - check
          - update
          - enforce

jobs:
  branch-protection-check:
    name: Verify Branch Protection Rules
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check branch protection status
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const branch = 'main';
            
            console.log(`üîç Checking branch protection for ${owner}/${repo}:${branch}`);
            
            try {
              const { data: protection } = await github.rest.repos.getBranchProtection({
                owner,
                repo,
                branch
              });
              
              console.log('‚úÖ Branch protection is enabled');
              console.log('Current settings:');
              console.log(`- Require PR reviews: ${protection.required_pull_request_reviews ? 'Yes' : 'No'}`);
              console.log(`- Require status checks: ${protection.required_status_checks ? 'Yes' : 'No'}`);
              console.log(`- Enforce for admins: ${protection.enforce_admins.enabled}`);
              console.log(`- Allow force pushes: ${protection.allow_force_pushes.enabled}`);
              console.log(`- Allow deletions: ${protection.allow_deletions.enabled}`);
              
              if (protection.required_status_checks) {
                console.log('Required status checks:');
                protection.required_status_checks.contexts.forEach(check => {
                  console.log(`  - ${check}`);
                });
              }
              
            } catch (error) {
              console.log('‚ö†Ô∏è Branch protection not configured properly');
              console.log('Error:', error.message);
              
              if (error.status === 404) {
                console.log('‚ùå No branch protection rules found for main branch');
                core.setFailed('Branch protection must be configured for main branch');
              }
            }
            
      - name: Recommend protection settings
        run: |
          echo "üõ°Ô∏è Recommended branch protection settings for main:"
          echo ""
          echo "Required settings:"
          echo "  ‚úÖ Require pull request reviews before merging"
          echo "  ‚úÖ Require status checks to pass before merging"
          echo "  ‚úÖ Require branches to be up to date before merging"
          echo "  ‚úÖ Include administrators"
          echo ""
          echo "Required status checks:"
          echo "  ‚úÖ Quick Validation (never-break-main.yml)"
          echo "  ‚úÖ Full Stack Testing (never-break-main.yml)"
          echo "  ‚úÖ Security & Dependencies (never-break-main.yml)"
          echo "  ‚úÖ Build & Deploy Readiness (never-break-main.yml)"
          echo "  ‚úÖ Main Branch Protection Gate (never-break-main.yml)"
          echo ""
          echo "Optional but recommended:"
          echo "  üîí Restrict pushes that create files larger than 100MB"
          echo "  üîí Prevent force pushes"
          echo "  üîí Prevent branch deletion"

  pr-requirements-check:
    name: Validate PR Requirements
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check PR requirements
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            console.log(`üîç Checking PR #${pr.number} requirements`);
            
            let issues = [];
            
            // Check PR title format
            const titleRegex = /^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+/;
            if (!titleRegex.test(pr.title)) {
              issues.push('‚ùå PR title must follow conventional commit format: type(scope): description');
            } else {
              console.log('‚úÖ PR title follows conventional commit format');
            }
            
            // Check PR description
            if (!pr.body || pr.body.trim().length < 50) {
              issues.push('‚ùå PR must have a meaningful description (minimum 50 characters)');
            } else {
              console.log('‚úÖ PR has adequate description');
            }
            
            // Check branch name
            const branchRegex = /^(feat|fix|docs|style|refactor|test|chore)\/[a-z0-9-]+$/;
            if (!branchRegex.test(pr.head.ref)) {
              issues.push('‚ùå Branch name should follow pattern: type/description-with-hyphens');
            } else {
              console.log('‚úÖ Branch name follows naming convention');
            }
            
            // Check if targeting main branch
            if (pr.base.ref !== 'main') {
              issues.push('‚ùå PR must target main branch');
            } else {
              console.log('‚úÖ PR targets main branch');
            }
            
            // Check for draft status
            if (pr.draft) {
              console.log('‚ÑπÔ∏è PR is in draft status - requirements will be enforced when ready for review');
              return;
            }
            
            // Report issues
            if (issues.length > 0) {
              console.log('\nüö® PR Requirements Issues:');
              issues.forEach(issue => console.log(issue));
              
              // Create or update comment with requirements
              const comment = `## üìã PR Requirements Check
              
**Issues found:**
${issues.map(issue => `- ${issue}`).join('\n')}

**Requirements:**
- ‚úÖ PR title: \`type(scope): description\` (e.g., \`feat(storage): add ClickHouse integration\`)
- ‚úÖ Branch name: \`type/description-with-hyphens\` (e.g., \`feat/clickhouse-integration\`)
- ‚úÖ Description: Meaningful description (minimum 50 characters)
- ‚úÖ Target: Must target \`main\` branch
- ‚úÖ All status checks must pass

Please fix these issues before the PR can be merged.`;
              
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: pr.number,
                body: comment
              });
              
              core.setFailed('PR does not meet requirements');
            } else {
              console.log('\n‚úÖ All PR requirements met!');
            }