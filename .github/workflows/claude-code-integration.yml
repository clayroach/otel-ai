name: Claude Code CI/CD Integration

on:
  # Trigger on PR comments for @claude mentions
  issue_comment:
    types: [created]
  
  # Trigger on pull requests for automated review
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths-ignore:
      - 'notes/**'
      - 'blog/**'
      - '*.md'
      - 'docs/**'
  
  # Trigger on pushes to main for deployment validation
  push:
    branches: [main]
    paths-ignore:
      - 'notes/**'
      - 'blog/**'
      - '*.md'
      - 'docs/**'
  
  # Manual workflow dispatch for testing
  workflow_dispatch:
    inputs:
      claude_command:
        description: 'Claude command to run'
        required: false
        default: '/review'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Automated testing pipeline
  test-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
        
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Setup environment variables
        run: |
          # Copy GitHub CI environment file
          cp .env.github .env
          
          # Override sensitive values from GitHub secrets
          if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
            sed -i "s/OPENAI_API_KEY=placeholder_will_be_replaced_by_github_secret/OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}/g" .env
          fi
          
          if [ -n "${{ secrets.ANTHROPIC_API_KEY }}" ]; then
            sed -i "s/ANTHROPIC_API_KEY=placeholder_will_be_replaced_by_github_secret/ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}/g" .env
          fi
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: TypeScript type checking
        run: pnpm typecheck:all
        
      - name: ESLint code quality
        run: pnpm lint
        
      - name: Prettier format checking
        run: pnpm format:check
        
      - name: Unit tests
        run: pnpm test
        
      - name: Setup Docker for integration tests
        run: |
          docker compose --profile dev up -d
          # Wait for services to be ready
          sleep 30
          
      - name: Setup OpenTelemetry Demo
        run: pnpm demo:setup
          
      - name: Start OpenTelemetry Demo
        run: pnpm demo:up
          
      - name: Integration tests
        run: pnpm test:integration
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps
        
      - name: E2E tests
        run: pnpm test:e2e
        
      - name: Cleanup Demo services
        if: always()
        run: pnpm demo:down
        
      - name: Cleanup Docker services
        if: always()
        run: docker compose --profile dev down -v

  # Claude Code integration for PR review and assistance
  claude-assistant:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write  # Required for OIDC authentication
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) ||
      github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Fetch full history for better context
          fetch-depth: 0
          
      - name: Claude Code Architectural Review (on PR open)
        if: github.event_name == 'pull_request'
        id: claude-review
        continue-on-error: true
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          claude_args: |
            --max-turns 5
            --model claude-3-haiku-20240307
            --allowedTools "mcp__github_inline_comment__create_inline_comment"
          prompt: |
            Review this pull request for architectural violations and post inline comments on any violations found.

            **CRITICAL: Use the mcp__github_inline_comment__create_inline_comment tool to comment directly on problematic lines.**

            **Priority Violations to Detect:**
            1. Direct @clickhouse/client imports outside storage package (HIGH confidence)
            2. Raw SQL strings outside storage service (HIGH confidence)
            3. Direct database client usage bypassing StorageServiceTag (HIGH confidence)
            4. Test files outside test/ subdirectories (MEDIUM confidence)
            5. Missing Dendron documentation links in README files (LOW confidence)

            **For each violation found:**
            - Post a specific PR comment on the exact line
            - Include confidence level: HIGH/MEDIUM/LOW
            - Provide concrete fix recommendations
            - Include code examples showing the correct approach

            **Example PR comment format:**
            ```
            üö® **HIGH Confidence Architectural Violation**

            Direct ClickHouse client import detected outside storage package.

            **Issue**: This bypasses the StorageServiceTag abstraction layer.
            **Fix**: Use StorageServiceTag dependency injection instead.

            **Correct approach:**
            ```typescript
            const storage = yield* StorageServiceTag
            yield* storage.queryTraces(params)
            ```
            ```

      - name: Slack Architectural Review Notification
        if: github.event_name == 'pull_request'
        continue-on-error: true
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'warning'
          job-name: 'Claude Code Architectural Review'
          workflow-name: 'PR Architectural Review'
          branch: ${{ github.head_ref || github.ref_name }}
          commit-sha: ${{ github.event.pull_request.head.sha || github.sha }}
          commit-author: ${{ github.event.pull_request.user.login || github.actor }}
          error-details: |
            üîç **Architectural Review Analysis**

            **PR #${{ github.event.number }}**: ${{ github.event.pull_request.title }}
            **Author**: ${{ github.event.pull_request.user.login }}

            Claude Code has analyzed this PR for architectural patterns:
            - ‚úÖ Service abstraction boundaries
            - ‚úÖ ClickHouse client usage validation
            - ‚úÖ Effect-TS layer compliance check
            - ‚úÖ Storage service integration review

            üìã **Check PR comments for any architectural findings and recommendations.**
          test-results: 'Architectural review completed - check PR comments for findings'
          run-url: ${{ github.event.pull_request.html_url }}

          
      - name: Claude Code Comment Response
        if: github.event_name == 'issue_comment'
        continue-on-error: true
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: ${{ github.event.comment.body }}
          claude_args: "--max-turns 5"
          
      - name: Claude Manual Command
        if: github.event_name == 'workflow_dispatch'
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: ${{ github.event.inputs.claude_command }}
          claude_args: "--max-turns 3"

  # Prevent breaking main branch
  protect-main:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-pipeline]
    
    steps:
      - name: Verify all tests passed
        run: |
          echo "‚úÖ All tests passed - main branch protection successful"
          echo "Ready for deployment or further automation"
          
      - name: Deployment validation
        run: |
          echo "üöÄ Main branch updated successfully"
          echo "Automated checks completed:"
          echo "  - TypeScript compilation: ‚úÖ"
          echo "  - Code quality (ESLint): ‚úÖ" 
          echo "  - Code formatting: ‚úÖ"
          echo "  - Unit tests: ‚úÖ"
          echo "  - Integration tests: ‚úÖ"
          echo "  - E2E tests: ‚úÖ"

  # Agent-driven automation workflows
  agent-workflows:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test-pipeline, protect-main]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js for agents
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Trigger documentation sync agent
        if: contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'fix:')
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            Use the code-to-docs-sync-agent to ensure documentation stays aligned with code changes.
            Review the latest commit and update any relevant README.md files or package documentation.
            Focus on maintaining bidirectional sync between implementation and documentation.
          claude_args: "--max-turns 2"
          
      - name: Trigger visual content updates
        if: contains(github.event.head_commit.message, 'feat:') || contains(github.event.head_commit.message, 'ui:')
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            Use the visual-content-agent to update any relevant screenshots or visual documentation
            based on the latest UI or feature changes. Organize screenshots and update README files
            with current visual representations.
          claude_args: "--max-turns 2"
          
      - name: Generate end-of-day summary
        if: contains(github.event.head_commit.message, 'day-') || contains(github.event.head_commit.message, 'milestone')
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            Use the end-day-agent to generate a progress summary and create blog content
            for this milestone or daily update. Review the changes and create appropriate
            content for the 30-Day AI-Native Observability Platform series.
          claude_args: "--max-turns 3"