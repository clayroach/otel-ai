name: Comprehensive UI Testing (All Browsers)

on:
  pull_request:
    branches: [main]
    paths:
      - 'ui/**'
      - 'playwright.config.ts'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/comprehensive-ui-testing.yml'
  push:
    branches: [main]
    paths:
      - 'ui/**'
      - 'playwright.config.ts'
      - 'package.json'
      - 'pnpm-lock.yaml'
      - '.github/workflows/comprehensive-ui-testing.yml'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  comprehensive-ui-testing:
    name: Multi-Browser UI Testing
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Send Start Notification
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'started'
          job-name: '🎭 UI Testing Started'
          workflow-name: 'Comprehensive UI Testing'
          error-details: "Starting comprehensive UI testing across all browsers. Branch: ${{ github.head_ref || github.ref_name }}. Event: ${{ github.event_name }}. Testing: Chromium, Firefox, WebKit."

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_API_KEY }}
        continue-on-error: true
          
      - name: Install dependencies
        run: |
          echo "📦 Installing dependencies (skipping optional native compilation)..."
          # For Dependabot PRs, allow lockfile updates
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            echo "🤖 Dependabot PR detected - allowing lockfile updates"
            pnpm install --no-frozen-lockfile --ignore-scripts
          else
            pnpm install --frozen-lockfile --ignore-scripts
          fi
          
      - name: Build required Docker images
        run: |
          echo "🏗️ Building required Docker images..."
          pnpm dev:build
          
      - name: Start infrastructure services
        run: |
          echo "🚀 Starting infrastructure services..."
          pnpm dev:up
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
      - name: Validate infrastructure health
        run: |
          echo "🏥 Validating infrastructure..."
          pnpm dev:validate
          
      - name: Run database migrations
        run: |
          echo "🗄️ Running database migrations..."
          pnpm db:migrate
          
      - name: Start demo and install all Playwright browsers in parallel
        run: |
          echo "🚀 Starting comprehensive UI testing setup..."
          
          # Start demo in background
          echo "🎬 Starting OpenTelemetry demo for realistic telemetry data..."
          pnpm demo:up &
          DEMO_PID=$!
          
          # Install ALL Playwright browsers for comprehensive testing
          echo "📥 Installing all Playwright browsers (Chromium, Firefox, WebKit)..."
          pnpm exec playwright install --with-deps &
          PLAYWRIGHT_PID=$!
          
          # Wait for both to complete
          echo "⏳ Waiting for demo startup to complete..."
          wait $DEMO_PID
          echo "✅ Demo startup completed"
          
          echo "⏳ Waiting for Playwright installation to complete..."
          wait $PLAYWRIGHT_PID
          echo "✅ All Playwright browsers installed"
          
          # Extended wait for telemetry data generation
          echo "⏳ Waiting for demo services to generate telemetry data..."
          sleep 30
          pnpm demo:status || echo "Demo status check completed"
          sleep 90  # Extended wait for CI environments
          
      - name: Comprehensive E2E tests (All Browsers)
        id: e2e-tests
        run: |
          echo "🎭 Running comprehensive E2E tests across all browsers..."
          echo "Testing on: Chromium, Firefox, WebKit"

          set +e
          CI=true pnpm test:e2e:all 2>&1 | tee e2e-all-browsers.log
          E2E_EXIT_CODE=${PIPESTATUS[0]}

          if [ $E2E_EXIT_CODE -ne 0 ]; then
            echo "e2e_errors<<EOF" >> $GITHUB_OUTPUT
            grep -A 10 "Error\\|Failed\\|FAIL\\|✗" e2e-all-browsers.log | tail -n 150 >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          exit $E2E_EXIT_CODE
        continue-on-error: true

      - name: Upload test artifacts on failure
        if: failure() && steps.e2e-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-ui-test-results
          path: |
            target/test-results/
            target/screenshots/
          retention-days: 7

      - name: Notify E2E Test Failure
        if: steps.e2e-tests.outcome == 'failure'
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'failure'
          job-name: '🚨 Multi-Browser E2E Tests Failed'
          workflow-name: 'Comprehensive UI Testing'
          test-results: ${{ steps.e2e-tests.outputs.e2e_errors }}
          error-details: "🚨 E2E tests failed across browsers (Chromium, Firefox, WebKit). Test artifacts uploaded: comprehensive-ui-test-results. View artifacts: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: Cleanup services
        if: always()
        run: |
          echo "🧹 Cleaning up services..."
          pnpm demo:down || echo "Demo cleanup completed"
          pnpm dev:down
          docker system prune -f

  ui-testing-summary:
    name: UI Testing Summary
    runs-on: ubuntu-latest
    needs: [comprehensive-ui-testing]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Send Final Summary
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: ${{ needs.comprehensive-ui-testing.result == 'success' && 'success' || 'failure' }}
          job-name: '✅ UI Testing Complete'
          workflow-name: 'Comprehensive UI Testing'
          error-details: "🎭 Multi-Browser UI Testing ${{ needs.comprehensive-ui-testing.result == 'success' && '✅ Passed' || '❌ Failed' }}. Browsers tested: Chromium, Firefox, WebKit. Status: ${{ needs.comprehensive-ui-testing.result }}. ${{ needs.comprehensive-ui-testing.result == 'success' && '✅ All browsers passed UI testing!' || '🚨 UI tests failed - Check artifacts for details' }} View full details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Report comprehensive UI testing results
        run: |
          echo "📋 Comprehensive UI Testing Results:"
          
          if [[ "${{ needs.comprehensive-ui-testing.result }}" == "success" ]]; then
            echo "✅ All browsers (Chromium, Firefox, WebKit) passed UI testing"
            echo "🎯 UI changes validated across all supported browsers"
          else
            echo "❌ Multi-browser UI testing failed"
            echo "🔍 Check individual browser test results for specific failures"
            exit 1
          fi