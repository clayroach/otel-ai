name: Never Break Main - Comprehensive Testing

on:
  pull_request:
    branches: [main]
    paths-ignore:
      - '.claude/**'
      - '.github/**'
      - 'notes/**'
      - 'blog/**'
      - '*.md'
      - 'docs/**'
  push:
    branches: [main]
    paths-ignore:
      - '.claude/**'
      - '.github/**'
      - 'notes/**'
      - 'blog/**'
      - '*.md' 
      - 'docs/**'

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.15.0'

jobs:
  # Start notification for main branch protection
  notify-start:
    name: Notify Workflow Start
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Send Start Notification
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'started'
          job-name: '🛡️ Main Branch Protection Started'
          workflow-name: 'Never Break Main'
          branch: ${{ github.head_ref || github.ref_name }}
          pr-number: ${{ github.event.pull_request.number }}
          pr-title: ${{ github.event.pull_request.title }}
          pr-url: ${{ github.event.pull_request.html_url }}
          error-details: "Main branch protection workflow started. Event: ${{ github.event_name }}. Branch: ${{ github.head_ref || github.ref_name }}. Author: ${{ github.actor }}. Commit: ${{ github.event.pull_request.head.sha || github.sha }}."

  # Fast feedback - basic checks
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: notify-start
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '8.15.0'
          
      - name: Install dependencies
        run: |
          echo "📦 Installing workspace dependencies..."
          pnpm install --frozen-lockfile
        
      - name: TypeScript compilation
        id: typescript
        run: |
          echo "🔍 Running TypeScript type checking..."
          pnpm typecheck:all 2>&1 | tee typescript-output.log || echo "typescript_failed=true" >> $GITHUB_ENV
          if [ "$typescript_failed" == "true" ]; then
            echo "❌ TypeScript compilation failed"
            exit 1
          fi

      - name: Code quality (ESLint)
        id: eslint
        run: |
          echo "🔍 Running ESLint code quality checks..."
          pnpm lint 2>&1 | tee eslint-output.log || echo "eslint_failed=true" >> $GITHUB_ENV
          if [ "$eslint_failed" == "true" ]; then
            echo "❌ ESLint validation failed"
            exit 1
          fi

      - name: Unit tests
        id: unit-tests
        run: |
          echo "🧪 Running unit tests..."
          pnpm test 2>&1 | tee test-output.log || echo "tests_failed=true" >> $GITHUB_ENV
          if [ "$tests_failed" == "true" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi

      - name: Send Quick Validation Failure Notification
        if: failure() && (env.typescript_failed == 'true' || env.eslint_failed == 'true' || env.tests_failed == 'true')
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'failure'
          job-name: 'Quick Validation Failed'
          workflow-name: 'Never Break Main'
          branch: ${{ github.head_ref || github.ref_name }}
          pr-number: ${{ github.event.pull_request.number }}
          pr-title: ${{ github.event.pull_request.title }}
          pr-url: ${{ github.event.pull_request.html_url }}
          error-details: |
            🚨 **Quick Validation Failed**

            **Failed Checks:**
            ${{ env.typescript_failed == 'true' && '❌ TypeScript Compilation - Type checking errors found' || '' }}
            ${{ env.eslint_failed == 'true' && '❌ ESLint - Code quality issues detected' || '' }}
            ${{ env.tests_failed == 'true' && '❌ Unit Tests - Test failures detected' || '' }}

            **Error Summary:**
            ${{ env.typescript_failed == 'true' && 'TypeScript found type errors in the codebase. Check the workflow logs for specific type violations.' || '' }}
            ${{ env.eslint_failed == 'true' && 'ESLint found code quality issues. Review linting rules and fix violations.' || '' }}
            ${{ env.tests_failed == 'true' && 'Unit tests are failing. Ensure all tests pass before merging.' || '' }}

            **Next Steps:**
            1. Review the detailed error output in the GitHub Actions logs
            2. Fix the reported issues locally
            3. Push the fixes to update this PR

            View full details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # Comprehensive testing with real services
  full-validation:
    name: Full Stack Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: write
    needs: quick-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_API_KEY }}
        continue-on-error: true
          
      - name: Install dependencies
        run: |
          echo "📦 Installing workspace dependencies (skipping optional native compilation)..."
          # Update lockfiles to match package.json, then skip post-install scripts to avoid node-gyp issues
          pnpm install --ignore-scripts
          
      - name: Code formatting (Prettier)
        run: pnpm format:check
          
      - name: Build required Docker images
        run: |
          echo "🏗️ Building required Docker images with established pnpm commands..."
          pnpm dev:build
          echo "✅ Docker images built successfully"
          
      - name: Start infrastructure services
        run: |
          echo "🚀 Starting infrastructure services with established pnpm commands..."
          pnpm dev:up
          echo "⏳ Waiting for services to be ready..."
          sleep 30
          
      - name: Validate infrastructure health
        run: |
          echo "🏥 Validating infrastructure with established pnpm commands..."
          pnpm dev:validate
          echo "✅ Infrastructure validation completed"
          
      - name: Run database migrations
        run: |
          echo "🗄️ Running database migrations with established pnpm commands..."
          pnpm db:migrate
          echo "✅ Database migrations completed"
          
      - name: Unit tests with coverage
        run: |
          echo "🧪 Running unit tests with established pnpm commands..."
          pnpm test:coverage
          
      - name: Coverage Report
        uses: davelosert/vitest-coverage-report-action@v2
        if: always()
        with:
          json-summary-path: './target/coverage/coverage-summary.json'
          json-final-path: './target/coverage/coverage-final.json'
          vite-config-path: './vitest.config.ts'
          
      - name: Start demo and install Playwright browsers in parallel
        run: |
          echo "🚀 Starting demo and Playwright browser installation in parallel..."
          
          # Start demo in background
          echo "🎬 Starting OpenTelemetry demo for realistic telemetry data..."
          pnpm demo:up &
          DEMO_PID=$!
          
          # Install Playwright browsers (optimized for main branch testing)
          echo "📥 Installing Playwright browsers..."
          pnpm exec playwright install --with-deps &
          PLAYWRIGHT_PID=$!
          
          # Wait for both to complete
          echo "⏳ Waiting for demo startup to complete..."
          wait $DEMO_PID
          echo "✅ Demo startup completed"
          
          echo "⏳ Waiting for Playwright installation to complete..."
          wait $PLAYWRIGHT_PID
          echo "✅ Playwright browser installation completed"
          
          # Now wait for demo services to generate telemetry data
          echo "⏳ Waiting for demo services to start up and generate data..."
          sleep 30
          echo "🔍 Checking demo service health..."
          pnpm demo:status || echo "Demo status check completed"
          echo "⏳ Waiting for telemetry data generation..."
          sleep 90  # Extended wait time for CI environments where services start slower
          
      - name: Integration tests
        run: |
          echo "🔗 Running integration tests with established pnpm commands..."
          pnpm test:integration
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_LOW_TOKENS_API_KEY: ${{ secrets.ANTHROPIC_LOW_TOKENS_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: E2E tests with Playwright (Chromium only for speed)
        id: e2e-tests
        run: |
          echo "🎭 Running E2E tests with Chromium only for main branch validation..."

          set +e
          CI=true pnpm test:e2e 2>&1 | tee e2e-output.log
          E2E_EXIT_CODE=${PIPESTATUS[0]}

          if [ $E2E_EXIT_CODE -ne 0 ]; then
            echo "e2e_errors<<EOF" >> $GITHUB_OUTPUT
            tail -n 100 e2e-output.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

          exit $E2E_EXIT_CODE
        continue-on-error: true

      - name: Upload E2E Test Artifacts
        if: failure() && steps.e2e-tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            target/test-results/
            target/screenshots/
          retention-days: 7

      - name: Notify E2E Test Failure
        if: steps.e2e-tests.outcome == 'failure'
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: 'failure'
          job-name: '🚨 E2E Tests Failed'
          workflow-name: 'Never Break Main'
          branch: ${{ github.head_ref || github.ref_name }}
          pr-number: ${{ github.event.pull_request.number }}
          pr-title: ${{ github.event.pull_request.title }}
          pr-url: ${{ github.event.pull_request.html_url }}
          test-results: ${{ steps.e2e-tests.outputs.e2e_errors }}
          error-details: "🚨 E2E tests failed on main branch protection. View test artifacts: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}. Test results and screenshots have been uploaded as artifacts."
                    
      - name: Performance baseline check
        run: |
          echo "📊 Running performance baseline checks..."
          # Add performance tests here when available
          echo "Performance checks completed"
          
      # - name: Sync documentation with code changes
      #   uses: anthropics/claude-code-action@v1
      #   with:
      #     agent: code-to-docs-sync-agent
      #     prompt: |
      #       Full validation completed successfully. Analyze all code changes in this PR and ensure documentation is fully synchronized. 
      #       Update package READMEs, Dendron notes, API documentation, and CLAUDE.md to reflect current implementation state.
      #   env:
      #     ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          
      - name: Cleanup services
        if: always()
        run: |
          echo "🧹 Cleaning up services with established pnpm commands..."
          pnpm demo:down || echo "Demo cleanup completed"
          pnpm dev:down
          docker system prune -f

  # Security and dependency scanning
  # TEMPORARILY DISABLED: security-scan job for debugging full-validation
  # security-scan:
  #   name: Security & Dependencies
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #       
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}
  #         
  #     - name: Install dependencies
  #       run: pnpm install --frozen-lockfile
  #       
  #     - name: Audit dependencies
  #       run: pnpm audit --audit-level high
  #       
  #     - name: Check for outdated dependencies
  #       run: pnpm outdated || echo "Some dependencies are outdated"
  #       
  #     - name: Scan for secrets
  #       uses: trufflesecurity/trufflehog@main
  #       with:
  #         path: ./
  #         base: main
  #         head: HEAD

  # Build and deployment readiness
  # TEMPORARILY DISABLED: build-validation job while focusing on full-validation
  # build-validation:
  #   name: Build & Deploy Readiness
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   # needs: quick-validation  # DISABLED: removed dependency while debugging
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v5
  #       
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         
  #     - name: Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: ${{ env.PNPM_VERSION }}
  #         
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_API_KEY }}
  #       continue-on-error: true
  #         
  #     - name: Install dependencies
  #       run: |
  #         echo "📦 Installing dependencies (skipping optional native compilation)..."
  #         # Update lockfiles to match package.json, then skip post-install scripts to avoid node-gyp issues
  #         pnpm install --ignore-scripts
  #         
  #     - name: Generate protobuf definitions
  #       run: pnpm proto:generate
  #       
  #     - name: Build application
  #       run: pnpm build
  #       
  #     - name: Validate Docker builds
  #       run: |
  #         echo "🐳 Building Docker containers with established pnpm commands..."
  #         pnpm dev:build
  #         echo "✅ Docker builds successful"
  #         
  #     - name: Test production deployment
  #       run: |
  #         echo "🚀 Testing production deployment..."
  #         # Build images first before deploying
  #         docker compose --profile production build
  #         docker compose --profile production up -d
  #         sleep 20
  #         
  #         # Basic health checks
  #         echo "Validating production services..."
  #         curl -f http://localhost:5173/ || echo "Frontend not ready"
  #         
  #         docker compose --profile production down
  #         echo "✅ Production deployment test completed"

  # Final gate - all checks must pass
  main-protection-gate:
    name: Main Branch Protection Gate
    runs-on: ubuntu-latest
    needs: [notify-start, quick-validation, full-validation]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check all jobs status
        id: check-status
        run: |
          echo "📋 Checking active job results..."
          
          QUICK_STATUS="${{ needs.quick-validation.result }}"
          FULL_STATUS="${{ needs.full-validation.result }}"
          
          echo "Quick Validation: $QUICK_STATUS"
          echo "Full Validation: $FULL_STATUS"
          
          if [[ "$QUICK_STATUS" != "success" || "$FULL_STATUS" != "success" ]]; then
            echo "❌ Validation failed - MAIN BRANCH PROTECTION ACTIVATED"
            echo "Quick Validation: $QUICK_STATUS"
            echo "Full Validation: $FULL_STATUS"
            echo "This change will be blocked from merging to main"
            exit 1
          fi
          
          echo "✅ ALL CHECKS PASSED - Safe to merge to main"
          echo "🎉 Never Break Main policy successfully enforced"

      - name: Send Final Summary
        if: always()
        uses: ./.github/actions/slack-notify
        with:
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          status: ${{ (needs.quick-validation.result == 'success' && needs.full-validation.result == 'success') && 'success' || 'failure' }}
          job-name: 'Main Branch Protection Summary'
          workflow-name: 'Never Break Main'
          branch: ${{ github.head_ref || github.ref_name }}
          pr-number: ${{ github.event.pull_request.number }}
          pr-title: ${{ github.event.pull_request.title }}
          pr-url: ${{ github.event.pull_request.html_url }}
          error-details: |
            🛡️ **Main Branch Protection ${{ (needs.quick-validation.result == 'success' && needs.full-validation.result == 'success') && '✅ PASSED' || '❌ FAILED' }}**

            **Validation Results:**
            • Quick Validation: ${{ needs.quick-validation.result == 'success' && '✅ Passed' || '❌ Failed' }}
            • Full Stack Testing: ${{ needs.full-validation.result == 'success' && '✅ Passed' || needs.full-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }}

            ${{ needs.quick-validation.result != 'success' && '**Quick Validation Issues:**\n• Check TypeScript compilation\n• Review ESLint violations\n• Verify unit tests pass\n' || '' }}
            ${{ needs.full-validation.result == 'failure' && '**Full Stack Issues:**\n• Integration tests may be failing\n• E2E tests may have issues\n• Service dependencies might be down\n' || '' }}

            **Status:** ${{ (needs.quick-validation.result == 'success' && needs.full-validation.result == 'success') && '✅ All checks passed - Safe to merge!' || '🚨 Fix required issues before merging to main' }}

            **View Details:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}