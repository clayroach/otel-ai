// Copyright 2020, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=js"
// @generated from file opentelemetry/proto/collector/logs/v1/logs_service.proto (package opentelemetry.proto.collector.logs.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { ResourceLogs } from "../../../logs/v1/logs_pb.js";
import { file_opentelemetry_proto_logs_v1_logs } from "../../../logs/v1/logs_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file opentelemetry/proto/collector/logs/v1/logs_service.proto.
 */
export const file_opentelemetry_proto_collector_logs_v1_logs_service: GenFile = /*@__PURE__*/
  fileDesc("CjhvcGVudGVsZW1ldHJ5L3Byb3RvL2NvbGxlY3Rvci9sb2dzL3YxL2xvZ3Nfc2VydmljZS5wcm90bxIlb3BlbnRlbGVtZXRyeS5wcm90by5jb2xsZWN0b3IubG9ncy52MSJcChhFeHBvcnRMb2dzU2VydmljZVJlcXVlc3QSQAoNcmVzb3VyY2VfbG9ncxgBIAMoCzIpLm9wZW50ZWxlbWV0cnkucHJvdG8ubG9ncy52MS5SZXNvdXJjZUxvZ3MidQoZRXhwb3J0TG9nc1NlcnZpY2VSZXNwb25zZRJYCg9wYXJ0aWFsX3N1Y2Nlc3MYASABKAsyPy5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbGxlY3Rvci5sb2dzLnYxLkV4cG9ydExvZ3NQYXJ0aWFsU3VjY2VzcyJPChhFeHBvcnRMb2dzUGFydGlhbFN1Y2Nlc3MSHAoUcmVqZWN0ZWRfbG9nX3JlY29yZHMYASABKAMSFQoNZXJyb3JfbWVzc2FnZRgCIAEoCTKdAQoLTG9nc1NlcnZpY2USjQEKBkV4cG9ydBI/Lm9wZW50ZWxlbWV0cnkucHJvdG8uY29sbGVjdG9yLmxvZ3MudjEuRXhwb3J0TG9nc1NlcnZpY2VSZXF1ZXN0GkAub3BlbnRlbGVtZXRyeS5wcm90by5jb2xsZWN0b3IubG9ncy52MS5FeHBvcnRMb2dzU2VydmljZVJlc3BvbnNlIgBCmAEKKGlvLm9wZW50ZWxlbWV0cnkucHJvdG8uY29sbGVjdG9yLmxvZ3MudjFCEExvZ3NTZXJ2aWNlUHJvdG9QAVowZ28ub3BlbnRlbGVtZXRyeS5pby9wcm90by9vdGxwL2NvbGxlY3Rvci9sb2dzL3YxqgIlT3BlblRlbGVtZXRyeS5Qcm90by5Db2xsZWN0b3IuTG9ncy5WMWIGcHJvdG8z", [file_opentelemetry_proto_logs_v1_logs]);

/**
 * @generated from message opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest
 */
export type ExportLogsServiceRequest = Message<"opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest"> & {
  /**
   * An array of ResourceLogs.
   * For data coming from a single resource this array will typically contain one
   * element. Intermediary nodes (such as OpenTelemetry Collector) that receive
   * data from multiple origins typically batch the data before forwarding further and
   * in that case this array will contain multiple elements.
   *
   * @generated from field: repeated opentelemetry.proto.logs.v1.ResourceLogs resource_logs = 1;
   */
  resourceLogs: ResourceLogs[];
};

/**
 * Describes the message opentelemetry.proto.collector.logs.v1.ExportLogsServiceRequest.
 * Use `create(ExportLogsServiceRequestSchema)` to create a new message.
 */
export const ExportLogsServiceRequestSchema: GenMessage<ExportLogsServiceRequest> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_logs_v1_logs_service, 0);

/**
 * @generated from message opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse
 */
export type ExportLogsServiceResponse = Message<"opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse"> & {
  /**
   * The details of a partially successful export request.
   *
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_<signal>` with the number of items it rejected.
   *
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_<signal>` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   *
   * A `partial_success` message with an empty value (rejected_<signal> = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   *
   * @generated from field: opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess partial_success = 1;
   */
  partialSuccess?: ExportLogsPartialSuccess;
};

/**
 * Describes the message opentelemetry.proto.collector.logs.v1.ExportLogsServiceResponse.
 * Use `create(ExportLogsServiceResponseSchema)` to create a new message.
 */
export const ExportLogsServiceResponseSchema: GenMessage<ExportLogsServiceResponse> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_logs_v1_logs_service, 1);

/**
 * @generated from message opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess
 */
export type ExportLogsPartialSuccess = Message<"opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess"> & {
  /**
   * The number of rejected log records.
   *
   * A `rejected_<signal>` field holding a `0` value indicates that the
   * request was fully accepted.
   *
   * @generated from field: int64 rejected_log_records = 1;
   */
  rejectedLogRecords: bigint;

  /**
   * A developer-facing human-readable message in English. It should be used
   * either to explain why the server rejected parts of the data during a partial
   * success or to convey warnings/suggestions during a full success. The message
   * should offer guidance on how users can address such issues.
   *
   * error_message is an optional field. An error_message with an empty value
   * is equivalent to it not being set.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;
};

/**
 * Describes the message opentelemetry.proto.collector.logs.v1.ExportLogsPartialSuccess.
 * Use `create(ExportLogsPartialSuccessSchema)` to create a new message.
 */
export const ExportLogsPartialSuccessSchema: GenMessage<ExportLogsPartialSuccess> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_logs_v1_logs_service, 2);

/**
 * Service that can be used to push logs between one Application instrumented with
 * OpenTelemetry and an collector, or between an collector and a central collector (in this
 * case logs are sent/received to/from multiple Applications).
 *
 * @generated from service opentelemetry.proto.collector.logs.v1.LogsService
 */
export const LogsService: GenService<{
  /**
   * @generated from rpc opentelemetry.proto.collector.logs.v1.LogsService.Export
   */
  export: {
    methodKind: "unary";
    input: typeof ExportLogsServiceRequestSchema;
    output: typeof ExportLogsServiceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_opentelemetry_proto_collector_logs_v1_logs_service, 0);

