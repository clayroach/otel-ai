// Copyright 2023, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,import_extension=js"
// @generated from file opentelemetry/proto/collector/profiles/v1development/profiles_service.proto (package opentelemetry.proto.collector.profiles.v1development, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { ProfilesDictionary, ResourceProfiles } from "../../../profiles/v1development/profiles_pb.js";
import { file_opentelemetry_proto_profiles_v1development_profiles } from "../../../profiles/v1development/profiles_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file opentelemetry/proto/collector/profiles/v1development/profiles_service.proto.
 */
export const file_opentelemetry_proto_collector_profiles_v1development_profiles_service: GenFile = /*@__PURE__*/
  fileDesc("CktvcGVudGVsZW1ldHJ5L3Byb3RvL2NvbGxlY3Rvci9wcm9maWxlcy92MWRldmVsb3BtZW50L3Byb2ZpbGVzX3NlcnZpY2UucHJvdG8SNG9wZW50ZWxlbWV0cnkucHJvdG8uY29sbGVjdG9yLnByb2ZpbGVzLnYxZGV2ZWxvcG1lbnQiywEKHEV4cG9ydFByb2ZpbGVzU2VydmljZVJlcXVlc3QSVwoRcmVzb3VyY2VfcHJvZmlsZXMYASADKAsyPC5vcGVudGVsZW1ldHJ5LnByb3RvLnByb2ZpbGVzLnYxZGV2ZWxvcG1lbnQuUmVzb3VyY2VQcm9maWxlcxJSCgpkaWN0aW9uYXJ5GAIgASgLMj4ub3BlbnRlbGVtZXRyeS5wcm90by5wcm9maWxlcy52MWRldmVsb3BtZW50LlByb2ZpbGVzRGljdGlvbmFyeSKMAQodRXhwb3J0UHJvZmlsZXNTZXJ2aWNlUmVzcG9uc2USawoPcGFydGlhbF9zdWNjZXNzGAEgASgLMlIub3BlbnRlbGVtZXRyeS5wcm90by5jb2xsZWN0b3IucHJvZmlsZXMudjFkZXZlbG9wbWVudC5FeHBvcnRQcm9maWxlc1BhcnRpYWxTdWNjZXNzIlAKHEV4cG9ydFByb2ZpbGVzUGFydGlhbFN1Y2Nlc3MSGQoRcmVqZWN0ZWRfcHJvZmlsZXMYASABKAMSFQoNZXJyb3JfbWVzc2FnZRgCIAEoCTLHAQoPUHJvZmlsZXNTZXJ2aWNlErMBCgZFeHBvcnQSUi5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbGxlY3Rvci5wcm9maWxlcy52MWRldmVsb3BtZW50LkV4cG9ydFByb2ZpbGVzU2VydmljZVJlcXVlc3QaUy5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbGxlY3Rvci5wcm9maWxlcy52MWRldmVsb3BtZW50LkV4cG9ydFByb2ZpbGVzU2VydmljZVJlc3BvbnNlIgBCyQEKN2lvLm9wZW50ZWxlbWV0cnkucHJvdG8uY29sbGVjdG9yLnByb2ZpbGVzLnYxZGV2ZWxvcG1lbnRCFFByb2ZpbGVzU2VydmljZVByb3RvUAFaP2dvLm9wZW50ZWxlbWV0cnkuaW8vcHJvdG8vb3RscC9jb2xsZWN0b3IvcHJvZmlsZXMvdjFkZXZlbG9wbWVudKoCNE9wZW5UZWxlbWV0cnkuUHJvdG8uQ29sbGVjdG9yLlByb2ZpbGVzLlYxRGV2ZWxvcG1lbnRiBnByb3RvMw", [file_opentelemetry_proto_profiles_v1development_profiles]);

/**
 * @generated from message opentelemetry.proto.collector.profiles.v1development.ExportProfilesServiceRequest
 */
export type ExportProfilesServiceRequest = Message<"opentelemetry.proto.collector.profiles.v1development.ExportProfilesServiceRequest"> & {
  /**
   * An array of ResourceProfiles.
   * For data coming from a single resource this array will typically contain one
   * element. Intermediary nodes (such as OpenTelemetry Collector) that receive
   * data from multiple origins typically batch the data before forwarding further and
   * in that case this array will contain multiple elements.
   *
   * @generated from field: repeated opentelemetry.proto.profiles.v1development.ResourceProfiles resource_profiles = 1;
   */
  resourceProfiles: ResourceProfiles[];

  /**
   * The reference table containing all data shared by profiles across the message being sent.
   *
   * @generated from field: opentelemetry.proto.profiles.v1development.ProfilesDictionary dictionary = 2;
   */
  dictionary?: ProfilesDictionary;
};

/**
 * Describes the message opentelemetry.proto.collector.profiles.v1development.ExportProfilesServiceRequest.
 * Use `create(ExportProfilesServiceRequestSchema)` to create a new message.
 */
export const ExportProfilesServiceRequestSchema: GenMessage<ExportProfilesServiceRequest> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_profiles_v1development_profiles_service, 0);

/**
 * @generated from message opentelemetry.proto.collector.profiles.v1development.ExportProfilesServiceResponse
 */
export type ExportProfilesServiceResponse = Message<"opentelemetry.proto.collector.profiles.v1development.ExportProfilesServiceResponse"> & {
  /**
   * The details of a partially successful export request.
   *
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_<signal>` with the number of items it rejected.
   *
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_<signal>` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   *
   * A `partial_success` message with an empty value (rejected_<signal> = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   *
   * @generated from field: opentelemetry.proto.collector.profiles.v1development.ExportProfilesPartialSuccess partial_success = 1;
   */
  partialSuccess?: ExportProfilesPartialSuccess;
};

/**
 * Describes the message opentelemetry.proto.collector.profiles.v1development.ExportProfilesServiceResponse.
 * Use `create(ExportProfilesServiceResponseSchema)` to create a new message.
 */
export const ExportProfilesServiceResponseSchema: GenMessage<ExportProfilesServiceResponse> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_profiles_v1development_profiles_service, 1);

/**
 * @generated from message opentelemetry.proto.collector.profiles.v1development.ExportProfilesPartialSuccess
 */
export type ExportProfilesPartialSuccess = Message<"opentelemetry.proto.collector.profiles.v1development.ExportProfilesPartialSuccess"> & {
  /**
   * The number of rejected profiles.
   *
   * A `rejected_<signal>` field holding a `0` value indicates that the
   * request was fully accepted.
   *
   * @generated from field: int64 rejected_profiles = 1;
   */
  rejectedProfiles: bigint;

  /**
   * A developer-facing human-readable message in English. It should be used
   * either to explain why the server rejected parts of the data during a partial
   * success or to convey warnings/suggestions during a full success. The message
   * should offer guidance on how users can address such issues.
   *
   * error_message is an optional field. An error_message with an empty value
   * is equivalent to it not being set.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;
};

/**
 * Describes the message opentelemetry.proto.collector.profiles.v1development.ExportProfilesPartialSuccess.
 * Use `create(ExportProfilesPartialSuccessSchema)` to create a new message.
 */
export const ExportProfilesPartialSuccessSchema: GenMessage<ExportProfilesPartialSuccess> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_profiles_v1development_profiles_service, 2);

/**
 * Service that can be used to push profiles between one Application instrumented with
 * OpenTelemetry and a collector, or between a collector and a central collector.
 *
 * @generated from service opentelemetry.proto.collector.profiles.v1development.ProfilesService
 */
export const ProfilesService: GenService<{
  /**
   * @generated from rpc opentelemetry.proto.collector.profiles.v1development.ProfilesService.Export
   */
  export: {
    methodKind: "unary";
    input: typeof ExportProfilesServiceRequestSchema;
    output: typeof ExportProfilesServiceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_opentelemetry_proto_collector_profiles_v1development_profiles_service, 0);

