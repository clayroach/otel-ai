// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.9.0 with parameter "target=ts,import_extension=js"
// @generated from file opentelemetry/proto/collector/trace/v1/trace_service.proto (package opentelemetry.proto.collector.trace.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { ResourceSpans } from "../../../trace/v1/trace_pb.js";
import { file_opentelemetry_proto_trace_v1_trace } from "../../../trace/v1/trace_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file opentelemetry/proto/collector/trace/v1/trace_service.proto.
 */
export const file_opentelemetry_proto_collector_trace_v1_trace_service: GenFile = /*@__PURE__*/
  fileDesc("CjpvcGVudGVsZW1ldHJ5L3Byb3RvL2NvbGxlY3Rvci90cmFjZS92MS90cmFjZV9zZXJ2aWNlLnByb3RvEiZvcGVudGVsZW1ldHJ5LnByb3RvLmNvbGxlY3Rvci50cmFjZS52MSJgChlFeHBvcnRUcmFjZVNlcnZpY2VSZXF1ZXN0EkMKDnJlc291cmNlX3NwYW5zGAEgAygLMisub3BlbnRlbGVtZXRyeS5wcm90by50cmFjZS52MS5SZXNvdXJjZVNwYW5zIngKGkV4cG9ydFRyYWNlU2VydmljZVJlc3BvbnNlEloKD3BhcnRpYWxfc3VjY2VzcxgBIAEoCzJBLm9wZW50ZWxlbWV0cnkucHJvdG8uY29sbGVjdG9yLnRyYWNlLnYxLkV4cG9ydFRyYWNlUGFydGlhbFN1Y2Nlc3MiSgoZRXhwb3J0VHJhY2VQYXJ0aWFsU3VjY2VzcxIWCg5yZWplY3RlZF9zcGFucxgBIAEoAxIVCg1lcnJvcl9tZXNzYWdlGAIgASgJMqIBCgxUcmFjZVNlcnZpY2USkQEKBkV4cG9ydBJBLm9wZW50ZWxlbWV0cnkucHJvdG8uY29sbGVjdG9yLnRyYWNlLnYxLkV4cG9ydFRyYWNlU2VydmljZVJlcXVlc3QaQi5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbGxlY3Rvci50cmFjZS52MS5FeHBvcnRUcmFjZVNlcnZpY2VSZXNwb25zZSIAQpwBCilpby5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbGxlY3Rvci50cmFjZS52MUIRVHJhY2VTZXJ2aWNlUHJvdG9QAVoxZ28ub3BlbnRlbGVtZXRyeS5pby9wcm90by9vdGxwL2NvbGxlY3Rvci90cmFjZS92MaoCJk9wZW5UZWxlbWV0cnkuUHJvdG8uQ29sbGVjdG9yLlRyYWNlLlYxYgZwcm90bzM", [file_opentelemetry_proto_trace_v1_trace]);

/**
 * @generated from message opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest
 */
export type ExportTraceServiceRequest = Message<"opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest"> & {
  /**
   * An array of ResourceSpans.
   * For data coming from a single resource this array will typically contain one
   * element. Intermediary nodes (such as OpenTelemetry Collector) that receive
   * data from multiple origins typically batch the data before forwarding further and
   * in that case this array will contain multiple elements.
   *
   * @generated from field: repeated opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
   */
  resourceSpans: ResourceSpans[];
};

/**
 * Describes the message opentelemetry.proto.collector.trace.v1.ExportTraceServiceRequest.
 * Use `create(ExportTraceServiceRequestSchema)` to create a new message.
 */
export const ExportTraceServiceRequestSchema: GenMessage<ExportTraceServiceRequest> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_trace_v1_trace_service, 0);

/**
 * @generated from message opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse
 */
export type ExportTraceServiceResponse = Message<"opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse"> & {
  /**
   * The details of a partially successful export request.
   *
   * If the request is only partially accepted
   * (i.e. when the server accepts only parts of the data and rejects the rest)
   * the server MUST initialize the `partial_success` field and MUST
   * set the `rejected_<signal>` with the number of items it rejected.
   *
   * Servers MAY also make use of the `partial_success` field to convey
   * warnings/suggestions to senders even when the request was fully accepted.
   * In such cases, the `rejected_<signal>` MUST have a value of `0` and
   * the `error_message` MUST be non-empty.
   *
   * A `partial_success` message with an empty value (rejected_<signal> = 0 and
   * `error_message` = "") is equivalent to it not being set/present. Senders
   * SHOULD interpret it the same way as in the full success case.
   *
   * @generated from field: opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess partial_success = 1;
   */
  partialSuccess?: ExportTracePartialSuccess;
};

/**
 * Describes the message opentelemetry.proto.collector.trace.v1.ExportTraceServiceResponse.
 * Use `create(ExportTraceServiceResponseSchema)` to create a new message.
 */
export const ExportTraceServiceResponseSchema: GenMessage<ExportTraceServiceResponse> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_trace_v1_trace_service, 1);

/**
 * @generated from message opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess
 */
export type ExportTracePartialSuccess = Message<"opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess"> & {
  /**
   * The number of rejected spans.
   *
   * A `rejected_<signal>` field holding a `0` value indicates that the
   * request was fully accepted.
   *
   * @generated from field: int64 rejected_spans = 1;
   */
  rejectedSpans: bigint;

  /**
   * A developer-facing human-readable message in English. It should be used
   * either to explain why the server rejected parts of the data during a partial
   * success or to convey warnings/suggestions during a full success. The message
   * should offer guidance on how users can address such issues.
   *
   * error_message is an optional field. An error_message with an empty value
   * is equivalent to it not being set.
   *
   * @generated from field: string error_message = 2;
   */
  errorMessage: string;
};

/**
 * Describes the message opentelemetry.proto.collector.trace.v1.ExportTracePartialSuccess.
 * Use `create(ExportTracePartialSuccessSchema)` to create a new message.
 */
export const ExportTracePartialSuccessSchema: GenMessage<ExportTracePartialSuccess> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_collector_trace_v1_trace_service, 2);

/**
 * Service that can be used to push spans between one Application instrumented with
 * OpenTelemetry and a collector, or between a collector and a central collector (in this
 * case spans are sent/received to/from multiple Applications).
 *
 * @generated from service opentelemetry.proto.collector.trace.v1.TraceService
 */
export const TraceService: GenService<{
  /**
   * @generated from rpc opentelemetry.proto.collector.trace.v1.TraceService.Export
   */
  export: {
    methodKind: "unary";
    input: typeof ExportTraceServiceRequestSchema;
    output: typeof ExportTraceServiceResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_opentelemetry_proto_collector_trace_v1_trace_service, 0);

