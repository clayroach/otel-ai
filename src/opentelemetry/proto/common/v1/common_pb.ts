// Copyright 2019, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.7.0 with parameter "target=ts,import_extension=js"
// @generated from file opentelemetry/proto/common/v1/common.proto (package opentelemetry.proto.common.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file opentelemetry/proto/common/v1/common.proto.
 */
export const file_opentelemetry_proto_common_v1_common: GenFile = /*@__PURE__*/
  fileDesc("CipvcGVudGVsZW1ldHJ5L3Byb3RvL2NvbW1vbi92MS9jb21tb24ucHJvdG8SHW9wZW50ZWxlbWV0cnkucHJvdG8uY29tbW9uLnYxIowCCghBbnlWYWx1ZRIWCgxzdHJpbmdfdmFsdWUYASABKAlIABIUCgpib29sX3ZhbHVlGAIgASgISAASEwoJaW50X3ZhbHVlGAMgASgDSAASFgoMZG91YmxlX3ZhbHVlGAQgASgBSAASQAoLYXJyYXlfdmFsdWUYBSABKAsyKS5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbW1vbi52MS5BcnJheVZhbHVlSAASQwoMa3ZsaXN0X3ZhbHVlGAYgASgLMisub3BlbnRlbGVtZXRyeS5wcm90by5jb21tb24udjEuS2V5VmFsdWVMaXN0SAASFQoLYnl0ZXNfdmFsdWUYByABKAxIAEIHCgV2YWx1ZSJFCgpBcnJheVZhbHVlEjcKBnZhbHVlcxgBIAMoCzInLm9wZW50ZWxlbWV0cnkucHJvdG8uY29tbW9uLnYxLkFueVZhbHVlIkcKDEtleVZhbHVlTGlzdBI3CgZ2YWx1ZXMYASADKAsyJy5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbW1vbi52MS5LZXlWYWx1ZSJPCghLZXlWYWx1ZRILCgNrZXkYASABKAkSNgoFdmFsdWUYAiABKAsyJy5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbW1vbi52MS5BbnlWYWx1ZSKUAQoUSW5zdHJ1bWVudGF0aW9uU2NvcGUSDAoEbmFtZRgBIAEoCRIPCgd2ZXJzaW9uGAIgASgJEjsKCmF0dHJpYnV0ZXMYAyADKAsyJy5vcGVudGVsZW1ldHJ5LnByb3RvLmNvbW1vbi52MS5LZXlWYWx1ZRIgChhkcm9wcGVkX2F0dHJpYnV0ZXNfY291bnQYBCABKA0iWAoJRW50aXR5UmVmEhIKCnNjaGVtYV91cmwYASABKAkSDAoEdHlwZRgCIAEoCRIPCgdpZF9rZXlzGAMgAygJEhgKEGRlc2NyaXB0aW9uX2tleXMYBCADKAlCewogaW8ub3BlbnRlbGVtZXRyeS5wcm90by5jb21tb24udjFCC0NvbW1vblByb3RvUAFaKGdvLm9wZW50ZWxlbWV0cnkuaW8vcHJvdG8vb3RscC9jb21tb24vdjGqAh1PcGVuVGVsZW1ldHJ5LlByb3RvLkNvbW1vbi5WMWIGcHJvdG8z");

/**
 * AnyValue is used to represent any type of attribute value. AnyValue may contain a
 * primitive value such as a string or integer or it may contain an arbitrary nested
 * object containing arrays, key-value lists and primitives.
 *
 * @generated from message opentelemetry.proto.common.v1.AnyValue
 */
export type AnyValue = Message<"opentelemetry.proto.common.v1.AnyValue"> & {
  /**
   * The value is one of the listed fields. It is valid for all values to be unspecified
   * in which case this AnyValue is considered to be "empty".
   *
   * @generated from oneof opentelemetry.proto.common.v1.AnyValue.value
   */
  value: {
    /**
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bool bool_value = 2;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * @generated from field: int64 int_value = 3;
     */
    value: bigint;
    case: "intValue";
  } | {
    /**
     * @generated from field: double double_value = 4;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * @generated from field: opentelemetry.proto.common.v1.ArrayValue array_value = 5;
     */
    value: ArrayValue;
    case: "arrayValue";
  } | {
    /**
     * @generated from field: opentelemetry.proto.common.v1.KeyValueList kvlist_value = 6;
     */
    value: KeyValueList;
    case: "kvlistValue";
  } | {
    /**
     * @generated from field: bytes bytes_value = 7;
     */
    value: Uint8Array;
    case: "bytesValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message opentelemetry.proto.common.v1.AnyValue.
 * Use `create(AnyValueSchema)` to create a new message.
 */
export const AnyValueSchema: GenMessage<AnyValue> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_common_v1_common, 0);

/**
 * ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
 * since oneof in AnyValue does not allow repeated fields.
 *
 * @generated from message opentelemetry.proto.common.v1.ArrayValue
 */
export type ArrayValue = Message<"opentelemetry.proto.common.v1.ArrayValue"> & {
  /**
   * Array of values. The array may be empty (contain 0 elements).
   *
   * @generated from field: repeated opentelemetry.proto.common.v1.AnyValue values = 1;
   */
  values: AnyValue[];
};

/**
 * Describes the message opentelemetry.proto.common.v1.ArrayValue.
 * Use `create(ArrayValueSchema)` to create a new message.
 */
export const ArrayValueSchema: GenMessage<ArrayValue> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_common_v1_common, 1);

/**
 * KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
 * since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
 * a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
 * avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
 * are semantically equivalent.
 *
 * @generated from message opentelemetry.proto.common.v1.KeyValueList
 */
export type KeyValueList = Message<"opentelemetry.proto.common.v1.KeyValueList"> & {
  /**
   * A collection of key/value pairs of key-value pairs. The list may be empty (may
   * contain 0 elements).
   * The keys MUST be unique (it is not allowed to have more than one
   * value with the same key).
   *
   * @generated from field: repeated opentelemetry.proto.common.v1.KeyValue values = 1;
   */
  values: KeyValue[];
};

/**
 * Describes the message opentelemetry.proto.common.v1.KeyValueList.
 * Use `create(KeyValueListSchema)` to create a new message.
 */
export const KeyValueListSchema: GenMessage<KeyValueList> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_common_v1_common, 2);

/**
 * KeyValue is a key-value pair that is used to store Span attributes, Link
 * attributes, etc.
 *
 * @generated from message opentelemetry.proto.common.v1.KeyValue
 */
export type KeyValue = Message<"opentelemetry.proto.common.v1.KeyValue"> & {
  /**
   * @generated from field: string key = 1;
   */
  key: string;

  /**
   * @generated from field: opentelemetry.proto.common.v1.AnyValue value = 2;
   */
  value?: AnyValue;
};

/**
 * Describes the message opentelemetry.proto.common.v1.KeyValue.
 * Use `create(KeyValueSchema)` to create a new message.
 */
export const KeyValueSchema: GenMessage<KeyValue> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_common_v1_common, 3);

/**
 * InstrumentationScope is a message representing the instrumentation scope information
 * such as the fully qualified name and version. 
 *
 * @generated from message opentelemetry.proto.common.v1.InstrumentationScope
 */
export type InstrumentationScope = Message<"opentelemetry.proto.common.v1.InstrumentationScope"> & {
  /**
   * An empty instrumentation scope name means the name is unknown.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string version = 2;
   */
  version: string;

  /**
   * Additional attributes that describe the scope. [Optional].
   * Attribute keys MUST be unique (it is not allowed to have more than one
   * attribute with the same key).
   *
   * @generated from field: repeated opentelemetry.proto.common.v1.KeyValue attributes = 3;
   */
  attributes: KeyValue[];

  /**
   * @generated from field: uint32 dropped_attributes_count = 4;
   */
  droppedAttributesCount: number;
};

/**
 * Describes the message opentelemetry.proto.common.v1.InstrumentationScope.
 * Use `create(InstrumentationScopeSchema)` to create a new message.
 */
export const InstrumentationScopeSchema: GenMessage<InstrumentationScope> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_common_v1_common, 4);

/**
 * A reference to an Entity.
 * Entity represents an object of interest associated with produced telemetry: e.g spans, metrics, profiles, or logs.
 *
 * Status: [Development]
 *
 * @generated from message opentelemetry.proto.common.v1.EntityRef
 */
export type EntityRef = Message<"opentelemetry.proto.common.v1.EntityRef"> & {
  /**
   * The Schema URL, if known. This is the identifier of the Schema that the entity data
   * is recorded in. To learn more about Schema URL see
   * https://opentelemetry.io/docs/specs/otel/schemas/#schema-url
   *
   * This schema_url applies to the data in this message and to the Resource attributes
   * referenced by id_keys and description_keys.
   * TODO: discuss if we are happy with this somewhat complicated definition of what
   * the schema_url applies to.
   *
   * This field obsoletes the schema_url field in ResourceMetrics/ResourceSpans/ResourceLogs.
   *
   * @generated from field: string schema_url = 1;
   */
  schemaUrl: string;

  /**
   * Defines the type of the entity. MUST not change during the lifetime of the entity.
   * For example: "service" or "host". This field is required and MUST not be empty
   * for valid entities.
   *
   * @generated from field: string type = 2;
   */
  type: string;

  /**
   * Attribute Keys that identify the entity.
   * MUST not change during the lifetime of the entity. The Id must contain at least one attribute.
   * These keys MUST exist in the containing {message}.attributes.
   *
   * @generated from field: repeated string id_keys = 3;
   */
  idKeys: string[];

  /**
   * Descriptive (non-identifying) attribute keys of the entity.
   * MAY change over the lifetime of the entity. MAY be empty.
   * These attribute keys are not part of entity's identity.
   * These keys MUST exist in the containing {message}.attributes.
   *
   * @generated from field: repeated string description_keys = 4;
   */
  descriptionKeys: string[];
};

/**
 * Describes the message opentelemetry.proto.common.v1.EntityRef.
 * Use `create(EntityRefSchema)` to create a new message.
 */
export const EntityRefSchema: GenMessage<EntityRef> = /*@__PURE__*/
  messageDesc(file_opentelemetry_proto_common_v1_common, 5);

